/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGetPointArgs } from "./CreateGetPointArgs";
import { UpdateGetPointArgs } from "./UpdateGetPointArgs";
import { DeleteGetPointArgs } from "./DeleteGetPointArgs";
import { GetPointFindManyArgs } from "./GetPointFindManyArgs";
import { GetPointFindUniqueArgs } from "./GetPointFindUniqueArgs";
import { GetPoint } from "./GetPoint";
import { User } from "../../user/base/User";
import { GetPointService } from "../getPoint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GetPoint)
export class GetPointResolverBase {
  constructor(
    protected readonly service: GetPointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GetPoint",
    action: "read",
    possession: "any",
  })
  async _getPointsMeta(
    @graphql.Args() args: GetPointFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GetPoint])
  @nestAccessControl.UseRoles({
    resource: "GetPoint",
    action: "read",
    possession: "any",
  })
  async getPoints(
    @graphql.Args() args: GetPointFindManyArgs
  ): Promise<GetPoint[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GetPoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GetPoint",
    action: "read",
    possession: "own",
  })
  async getPoint(
    @graphql.Args() args: GetPointFindUniqueArgs
  ): Promise<GetPoint | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GetPoint)
  @nestAccessControl.UseRoles({
    resource: "GetPoint",
    action: "create",
    possession: "any",
  })
  async createGetPoint(
    @graphql.Args() args: CreateGetPointArgs
  ): Promise<GetPoint> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GetPoint)
  @nestAccessControl.UseRoles({
    resource: "GetPoint",
    action: "update",
    possession: "any",
  })
  async updateGetPoint(
    @graphql.Args() args: UpdateGetPointArgs
  ): Promise<GetPoint | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GetPoint)
  @nestAccessControl.UseRoles({
    resource: "GetPoint",
    action: "delete",
    possession: "any",
  })
  async deleteGetPoint(
    @graphql.Args() args: DeleteGetPointArgs
  ): Promise<GetPoint | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: GetPoint): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
