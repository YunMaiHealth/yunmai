/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateStatusArgs } from "./CreateStatusArgs";
import { UpdateStatusArgs } from "./UpdateStatusArgs";
import { DeleteStatusArgs } from "./DeleteStatusArgs";
import { StatusFindManyArgs } from "./StatusFindManyArgs";
import { StatusFindUniqueArgs } from "./StatusFindUniqueArgs";
import { Status } from "./Status";
import { User } from "../../user/base/User";
import { StatusService } from "../status.service";
@graphql.Resolver(() => Status)
export class StatusResolverBase {
  constructor(protected readonly service: StatusService) {}

  async _statusesMeta(
    @graphql.Args() args: StatusFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Status])
  async statuses(@graphql.Args() args: StatusFindManyArgs): Promise<Status[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Status, { nullable: true })
  async status(
    @graphql.Args() args: StatusFindUniqueArgs
  ): Promise<Status | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Status)
  async createStatus(@graphql.Args() args: CreateStatusArgs): Promise<Status> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => Status)
  async updateStatus(
    @graphql.Args() args: UpdateStatusArgs
  ): Promise<Status | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Status)
  async deleteStatus(
    @graphql.Args() args: DeleteStatusArgs
  ): Promise<Status | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, { nullable: true })
  async user(@graphql.Parent() parent: Status): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
