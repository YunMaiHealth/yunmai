/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUsePointArgs } from "./CreateUsePointArgs";
import { UpdateUsePointArgs } from "./UpdateUsePointArgs";
import { DeleteUsePointArgs } from "./DeleteUsePointArgs";
import { UsePointFindManyArgs } from "./UsePointFindManyArgs";
import { UsePointFindUniqueArgs } from "./UsePointFindUniqueArgs";
import { UsePoint } from "./UsePoint";
import { User } from "../../user/base/User";
import { UsePointService } from "../usePoint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UsePoint)
export class UsePointResolverBase {
  constructor(
    protected readonly service: UsePointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UsePoint",
    action: "read",
    possession: "any",
  })
  async _usePointsMeta(
    @graphql.Args() args: UsePointFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UsePoint])
  @nestAccessControl.UseRoles({
    resource: "UsePoint",
    action: "read",
    possession: "any",
  })
  async usePoints(
    @graphql.Args() args: UsePointFindManyArgs
  ): Promise<UsePoint[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UsePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UsePoint",
    action: "read",
    possession: "own",
  })
  async usePoint(
    @graphql.Args() args: UsePointFindUniqueArgs
  ): Promise<UsePoint | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsePoint)
  @nestAccessControl.UseRoles({
    resource: "UsePoint",
    action: "create",
    possession: "any",
  })
  async createUsePoint(
    @graphql.Args() args: CreateUsePointArgs
  ): Promise<UsePoint> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsePoint)
  @nestAccessControl.UseRoles({
    resource: "UsePoint",
    action: "update",
    possession: "any",
  })
  async updateUsePoint(
    @graphql.Args() args: UpdateUsePointArgs
  ): Promise<UsePoint | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsePoint)
  @nestAccessControl.UseRoles({
    resource: "UsePoint",
    action: "delete",
    possession: "any",
  })
  async deleteUsePoint(
    @graphql.Args() args: DeleteUsePointArgs
  ): Promise<UsePoint | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: UsePoint): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
