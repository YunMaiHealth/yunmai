/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserQuestionArgs } from "./CreateUserQuestionArgs";
import { UpdateUserQuestionArgs } from "./UpdateUserQuestionArgs";
import { DeleteUserQuestionArgs } from "./DeleteUserQuestionArgs";
import { UserQuestionFindManyArgs } from "./UserQuestionFindManyArgs";
import { UserQuestionFindUniqueArgs } from "./UserQuestionFindUniqueArgs";
import { UserQuestion } from "./UserQuestion";
import { User } from "../../user/base/User";
import { UserQuestionService } from "../userQuestion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserQuestion)
export class UserQuestionResolverBase {
  constructor(
    protected readonly service: UserQuestionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "read",
    possession: "any",
  })
  async _userQuestionsMeta(
    @graphql.Args() args: UserQuestionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserQuestion])
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "read",
    possession: "any",
  })
  async userQuestions(
    @graphql.Args() args: UserQuestionFindManyArgs
  ): Promise<UserQuestion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserQuestion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "read",
    possession: "own",
  })
  async userQuestion(
    @graphql.Args() args: UserQuestionFindUniqueArgs
  ): Promise<UserQuestion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserQuestion)
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "create",
    possession: "any",
  })
  async createUserQuestion(
    @graphql.Args() args: CreateUserQuestionArgs
  ): Promise<UserQuestion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserQuestion)
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "update",
    possession: "any",
  })
  async updateUserQuestion(
    @graphql.Args() args: UpdateUserQuestionArgs
  ): Promise<UserQuestion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserQuestion)
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "delete",
    possession: "any",
  })
  async deleteUserQuestion(
    @graphql.Args() args: DeleteUserQuestionArgs
  ): Promise<UserQuestion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: UserQuestion): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
