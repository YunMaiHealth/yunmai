/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateExpenseMetaGasArgs } from "./CreateExpenseMetaGasArgs";
import { UpdateExpenseMetaGasArgs } from "./UpdateExpenseMetaGasArgs";
import { DeleteExpenseMetaGasArgs } from "./DeleteExpenseMetaGasArgs";
import { ExpenseMetaGasFindManyArgs } from "./ExpenseMetaGasFindManyArgs";
import { ExpenseMetaGasFindUniqueArgs } from "./ExpenseMetaGasFindUniqueArgs";
import { ExpenseMetaGas } from "./ExpenseMetaGas";
import { User } from "../../user/base/User";
import { ExpenseMetaGasService } from "../expenseMetaGas.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExpenseMetaGas)
export class ExpenseMetaGasResolverBase {
  constructor(
    protected readonly service: ExpenseMetaGasService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMetaGas",
    action: "read",
    possession: "any",
  })
  async _expenseMetaGasesMeta(
    @graphql.Args() args: ExpenseMetaGasFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExpenseMetaGas])
  @nestAccessControl.UseRoles({
    resource: "ExpenseMetaGas",
    action: "read",
    possession: "any",
  })
  async expenseMetaGases(
    @graphql.Args() args: ExpenseMetaGasFindManyArgs
  ): Promise<ExpenseMetaGas[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExpenseMetaGas, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExpenseMetaGas",
    action: "read",
    possession: "own",
  })
  async expenseMetaGas(
    @graphql.Args() args: ExpenseMetaGasFindUniqueArgs
  ): Promise<ExpenseMetaGas | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpenseMetaGas)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMetaGas",
    action: "create",
    possession: "any",
  })
  async createExpenseMetaGas(
    @graphql.Args() args: CreateExpenseMetaGasArgs
  ): Promise<ExpenseMetaGas> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpenseMetaGas)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMetaGas",
    action: "update",
    possession: "any",
  })
  async updateExpenseMetaGas(
    @graphql.Args() args: UpdateExpenseMetaGasArgs
  ): Promise<ExpenseMetaGas | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpenseMetaGas)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMetaGas",
    action: "delete",
    possession: "any",
  })
  async deleteExpenseMetaGas(
    @graphql.Args() args: DeleteExpenseMetaGasArgs
  ): Promise<ExpenseMetaGas | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: ExpenseMetaGas): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
