/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateHabitusArgs } from "./CreateHabitusArgs";
import { UpdateHabitusArgs } from "./UpdateHabitusArgs";
import { DeleteHabitusArgs } from "./DeleteHabitusArgs";
import { HabitusFindManyArgs } from "./HabitusFindManyArgs";
import { HabitusFindUniqueArgs } from "./HabitusFindUniqueArgs";
import { Habitus } from "./Habitus";
import { User } from "../../user/base/User";
import { HabitusService } from "../habitus.service";
@graphql.Resolver(() => Habitus)
export class HabitusResolverBase {
  constructor(protected readonly service: HabitusService) {}

  async _habitusesMeta(
    @graphql.Args() args: HabitusFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Habitus])
  async habituses(
    @graphql.Args() args: HabitusFindManyArgs
  ): Promise<Habitus[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Habitus, { nullable: true })
  async habitus(
    @graphql.Args() args: HabitusFindUniqueArgs
  ): Promise<Habitus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Habitus)
  async createHabitus(
    @graphql.Args() args: CreateHabitusArgs
  ): Promise<Habitus> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Habitus)
  async updateHabitus(
    @graphql.Args() args: UpdateHabitusArgs
  ): Promise<Habitus | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Habitus)
  async deleteHabitus(
    @graphql.Args() args: DeleteHabitusArgs
  ): Promise<Habitus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, { nullable: true })
  async user(@graphql.Parent() parent: Habitus): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
