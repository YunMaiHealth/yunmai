/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIncomeMetaGasArgs } from "./CreateIncomeMetaGasArgs";
import { UpdateIncomeMetaGasArgs } from "./UpdateIncomeMetaGasArgs";
import { DeleteIncomeMetaGasArgs } from "./DeleteIncomeMetaGasArgs";
import { IncomeMetaGasFindManyArgs } from "./IncomeMetaGasFindManyArgs";
import { IncomeMetaGasFindUniqueArgs } from "./IncomeMetaGasFindUniqueArgs";
import { IncomeMetaGas } from "./IncomeMetaGas";
import { User } from "../../user/base/User";
import { IncomeMetaGasService } from "../incomeMetaGas.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IncomeMetaGas)
export class IncomeMetaGasResolverBase {
  constructor(
    protected readonly service: IncomeMetaGasService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IncomeMetaGas",
    action: "read",
    possession: "any",
  })
  async _incomeMetaGasesMeta(
    @graphql.Args() args: IncomeMetaGasFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IncomeMetaGas])
  @nestAccessControl.UseRoles({
    resource: "IncomeMetaGas",
    action: "read",
    possession: "any",
  })
  async incomeMetaGases(
    @graphql.Args() args: IncomeMetaGasFindManyArgs
  ): Promise<IncomeMetaGas[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IncomeMetaGas, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IncomeMetaGas",
    action: "read",
    possession: "own",
  })
  async incomeMetaGas(
    @graphql.Args() args: IncomeMetaGasFindUniqueArgs
  ): Promise<IncomeMetaGas | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeMetaGas)
  @nestAccessControl.UseRoles({
    resource: "IncomeMetaGas",
    action: "create",
    possession: "any",
  })
  async createIncomeMetaGas(
    @graphql.Args() args: CreateIncomeMetaGasArgs
  ): Promise<IncomeMetaGas> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeMetaGas)
  @nestAccessControl.UseRoles({
    resource: "IncomeMetaGas",
    action: "update",
    possession: "any",
  })
  async updateIncomeMetaGas(
    @graphql.Args() args: UpdateIncomeMetaGasArgs
  ): Promise<IncomeMetaGas | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IncomeMetaGas)
  @nestAccessControl.UseRoles({
    resource: "IncomeMetaGas",
    action: "delete",
    possession: "any",
  })
  async deleteIncomeMetaGas(
    @graphql.Args() args: DeleteIncomeMetaGasArgs
  ): Promise<IncomeMetaGas | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: IncomeMetaGas): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
