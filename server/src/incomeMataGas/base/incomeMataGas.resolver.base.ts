/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIncomeMataGasArgs } from "./CreateIncomeMataGasArgs";
import { UpdateIncomeMataGasArgs } from "./UpdateIncomeMataGasArgs";
import { DeleteIncomeMataGasArgs } from "./DeleteIncomeMataGasArgs";
import { IncomeMataGasFindManyArgs } from "./IncomeMataGasFindManyArgs";
import { IncomeMataGasFindUniqueArgs } from "./IncomeMataGasFindUniqueArgs";
import { IncomeMataGas } from "./IncomeMataGas";
import { User } from "../../user/base/User";
import { IncomeMataGasService } from "../incomeMataGas.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IncomeMataGas)
export class IncomeMataGasResolverBase {
  constructor(
    protected readonly service: IncomeMataGasService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "read",
    possession: "any",
  })
  async _incomeMataGasesMeta(
    @graphql.Args() args: IncomeMataGasFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IncomeMataGas])
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "read",
    possession: "any",
  })
  async incomeMataGases(
    @graphql.Args() args: IncomeMataGasFindManyArgs
  ): Promise<IncomeMataGas[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IncomeMataGas, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "read",
    possession: "own",
  })
  async incomeMataGas(
    @graphql.Args() args: IncomeMataGasFindUniqueArgs
  ): Promise<IncomeMataGas | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeMataGas)
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "create",
    possession: "any",
  })
  async createIncomeMataGas(
    @graphql.Args() args: CreateIncomeMataGasArgs
  ): Promise<IncomeMataGas> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeMataGas)
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "update",
    possession: "any",
  })
  async updateIncomeMataGas(
    @graphql.Args() args: UpdateIncomeMataGasArgs
  ): Promise<IncomeMataGas | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IncomeMataGas)
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "delete",
    possession: "any",
  })
  async deleteIncomeMataGas(
    @graphql.Args() args: DeleteIncomeMataGasArgs
  ): Promise<IncomeMataGas | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: IncomeMataGas): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
