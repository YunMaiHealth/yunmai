/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMessageArgs } from "./CreateMessageArgs";
import { UpdateMessageArgs } from "./UpdateMessageArgs";
import { DeleteMessageArgs } from "./DeleteMessageArgs";
import { MessageFindManyArgs } from "./MessageFindManyArgs";
import { MessageFindUniqueArgs } from "./MessageFindUniqueArgs";
import { Message } from "./Message";
import { User } from "../../user/base/User";
import { Event } from "../../event/base/Event";
import { MessageService } from "../message.service";
import { MessageInfo } from "./MessageInfo";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Message)
export class MessageResolverBase {
  constructor(
    protected readonly service: MessageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async _messagesMeta(
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Message])
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async messages(
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Message, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "own",
  })
  async message(
    @graphql.Args() args: MessageFindUniqueArgs
  ): Promise<Message | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Message)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "create",
    possession: "any",
  })
  async createMessage(
    @graphql.Args() args: CreateMessageArgs
  ): Promise<Message> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Message)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "update",
    possession: "any",
  })
  async updateMessage(
    @graphql.Args() args: UpdateMessageArgs
  ): Promise<Message | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Message)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "delete",
    possession: "any",
  })
  async deleteMessage(
    @graphql.Args() args: DeleteMessageArgs
  ): Promise<Message | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Message): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async event(@graphql.Parent() parent: Message): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
 
   @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MessageInfo])
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async getMessageInfo(
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<MessageInfo[]> {

 const allMessages =await this.service.findMany(args);
 const messageMap = new Map();
 const newMessageMap = new Map();
  for(let i=0;i<allMessages.length;i++){
       //获取每个类型最新消息信息
       let object = allMessages[i]
       let type = object.messageType
        if(messageMap.has(type)){
          if(object.sendTime>messageMap.get(type).sendTime){
            messageMap.set(type,allMessages[i])
          }
        }else{
          messageMap.set(type,allMessages[i])
        }
       //获取每个类型未读消息数量
       let isNew = object.isNew
       if(isNew==true){
          if(newMessageMap.has(type)){
            newMessageMap.set(type,newMessageMap.get(type)+1)
          }else{
            newMessageMap.set(type,1)
           }
       }
  }
  //合并数据
  let MessageNotify :MessageInfo[] = []
  for (var value of messageMap.values()) {
    if(newMessageMap.has(value.messageType)){
      value.newMessageNum = newMessageMap.get(value.messageType)
    }
    MessageNotify.push(value)
   }

    return MessageNotify;
  }
}
