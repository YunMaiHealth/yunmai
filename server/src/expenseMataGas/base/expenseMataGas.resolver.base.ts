/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateExpenseMataGasArgs } from "./CreateExpenseMataGasArgs";
import { UpdateExpenseMataGasArgs } from "./UpdateExpenseMataGasArgs";
import { DeleteExpenseMataGasArgs } from "./DeleteExpenseMataGasArgs";
import { ExpenseMataGasFindManyArgs } from "./ExpenseMataGasFindManyArgs";
import { ExpenseMataGasFindUniqueArgs } from "./ExpenseMataGasFindUniqueArgs";
import { ExpenseMataGas } from "./ExpenseMataGas";
import { User } from "../../user/base/User";
import { ExpenseMataGasService } from "../expenseMataGas.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExpenseMataGas)
export class ExpenseMataGasResolverBase {
  constructor(
    protected readonly service: ExpenseMataGasService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "read",
    possession: "any",
  })
  async _expenseMataGasesMeta(
    @graphql.Args() args: ExpenseMataGasFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExpenseMataGas])
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "read",
    possession: "any",
  })
  async expenseMataGases(
    @graphql.Args() args: ExpenseMataGasFindManyArgs
  ): Promise<ExpenseMataGas[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExpenseMataGas, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "read",
    possession: "own",
  })
  async expenseMataGas(
    @graphql.Args() args: ExpenseMataGasFindUniqueArgs
  ): Promise<ExpenseMataGas | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpenseMataGas)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "create",
    possession: "any",
  })
  async createExpenseMataGas(
    @graphql.Args() args: CreateExpenseMataGasArgs
  ): Promise<ExpenseMataGas> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpenseMataGas)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "update",
    possession: "any",
  })
  async updateExpenseMataGas(
    @graphql.Args() args: UpdateExpenseMataGasArgs
  ): Promise<ExpenseMataGas | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpenseMataGas)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "delete",
    possession: "any",
  })
  async deleteExpenseMataGas(
    @graphql.Args() args: DeleteExpenseMataGasArgs
  ): Promise<ExpenseMataGas | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: ExpenseMataGas): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
