/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMessageNotifyArgs } from "./CreateMessageNotifyArgs";
import { UpdateMessageNotifyArgs } from "./UpdateMessageNotifyArgs";
import { DeleteMessageNotifyArgs } from "./DeleteMessageNotifyArgs";
import { MessageNotifyFindManyArgs } from "./MessageNotifyFindManyArgs";
import { MessageNotifyFindUniqueArgs } from "./MessageNotifyFindUniqueArgs";
import { MessageNotify } from "./MessageNotify";
import { User } from "../../user/base/User";
import { EventLog } from "../../eventLog/base/EventLog";
import { MessageNotifyService } from "../messageNotify.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MessageNotify)
export class MessageNotifyResolverBase {
  constructor(
    protected readonly service: MessageNotifyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MessageNotify",
    action: "read",
    possession: "any",
  })
  async _messageNotifiesMeta(
    @graphql.Args() args: MessageNotifyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MessageNotify])
  @nestAccessControl.UseRoles({
    resource: "MessageNotify",
    action: "read",
    possession: "any",
  })
  async messageNotifies(
    @graphql.Args() args: MessageNotifyFindManyArgs
  ): Promise<MessageNotify[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MessageNotify, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MessageNotify",
    action: "read",
    possession: "own",
  })
  async messageNotify(
    @graphql.Args() args: MessageNotifyFindUniqueArgs
  ): Promise<MessageNotify | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MessageNotify)
  @nestAccessControl.UseRoles({
    resource: "MessageNotify",
    action: "create",
    possession: "any",
  })
  async createMessageNotify(
    @graphql.Args() args: CreateMessageNotifyArgs
  ): Promise<MessageNotify> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        eventLog: args.data.eventLog
          ? {
              connect: args.data.eventLog,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MessageNotify)
  @nestAccessControl.UseRoles({
    resource: "MessageNotify",
    action: "update",
    possession: "any",
  })
  async updateMessageNotify(
    @graphql.Args() args: UpdateMessageNotifyArgs
  ): Promise<MessageNotify | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          eventLog: args.data.eventLog
            ? {
                connect: args.data.eventLog,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MessageNotify)
  @nestAccessControl.UseRoles({
    resource: "MessageNotify",
    action: "delete",
    possession: "any",
  })
  async deleteMessageNotify(
    @graphql.Args() args: DeleteMessageNotifyArgs
  ): Promise<MessageNotify | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: MessageNotify): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EventLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EventLog",
    action: "read",
    possession: "any",
  })
  async eventLog(
    @graphql.Parent() parent: MessageNotify
  ): Promise<EventLog | null> {
    const result = await this.service.getEventLog(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
