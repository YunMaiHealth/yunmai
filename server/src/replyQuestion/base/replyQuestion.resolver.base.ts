/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateReplyQuestionArgs } from "./CreateReplyQuestionArgs";
import { UpdateReplyQuestionArgs } from "./UpdateReplyQuestionArgs";
import { DeleteReplyQuestionArgs } from "./DeleteReplyQuestionArgs";
import { ReplyQuestionFindManyArgs } from "./ReplyQuestionFindManyArgs";
import { ReplyQuestionFindUniqueArgs } from "./ReplyQuestionFindUniqueArgs";
import { ReplyQuestion } from "./ReplyQuestion";
import { User } from "../../user/base/User";
import { UserQuestion } from "../../userQuestion/base/UserQuestion";
import { ReplyQuestionService } from "../replyQuestion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReplyQuestion)
export class ReplyQuestionResolverBase {
  constructor(
    protected readonly service: ReplyQuestionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReplyQuestion",
    action: "read",
    possession: "any",
  })
  async _replyQuestionsMeta(
    @graphql.Args() args: ReplyQuestionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReplyQuestion])
  @nestAccessControl.UseRoles({
    resource: "ReplyQuestion",
    action: "read",
    possession: "any",
  })
  async replyQuestions(
    @graphql.Args() args: ReplyQuestionFindManyArgs
  ): Promise<ReplyQuestion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReplyQuestion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReplyQuestion",
    action: "read",
    possession: "own",
  })
  async replyQuestion(
    @graphql.Args() args: ReplyQuestionFindUniqueArgs
  ): Promise<ReplyQuestion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReplyQuestion)
  @nestAccessControl.UseRoles({
    resource: "ReplyQuestion",
    action: "create",
    possession: "any",
  })
  async createReplyQuestion(
    @graphql.Args() args: CreateReplyQuestionArgs
  ): Promise<ReplyQuestion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        replyUser: {
          connect: args.data.replyUser,
        },

        userQuestion: args.data.userQuestion
          ? {
              connect: args.data.userQuestion,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReplyQuestion)
  @nestAccessControl.UseRoles({
    resource: "ReplyQuestion",
    action: "update",
    possession: "any",
  })
  async updateReplyQuestion(
    @graphql.Args() args: UpdateReplyQuestionArgs
  ): Promise<ReplyQuestion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          replyUser: {
            connect: args.data.replyUser,
          },

          userQuestion: args.data.userQuestion
            ? {
                connect: args.data.userQuestion,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReplyQuestion)
  @nestAccessControl.UseRoles({
    resource: "ReplyQuestion",
    action: "delete",
    possession: "any",
  })
  async deleteReplyQuestion(
    @graphql.Args() args: DeleteReplyQuestionArgs
  ): Promise<ReplyQuestion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async replyUser(
    @graphql.Parent() parent: ReplyQuestion
  ): Promise<User | null> {
    const result = await this.service.getReplyUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserQuestion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserQuestion",
    action: "read",
    possession: "any",
  })
  async userQuestion(
    @graphql.Parent() parent: ReplyQuestion
  ): Promise<UserQuestion | null> {
    const result = await this.service.getUserQuestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
