/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsJSON,
  IsEnum,
  IsDate,
  ValidateNested,
} from "class-validator";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumUserGender } from "./EnumUserGender";
import { Type } from "class-transformer";
import { UserStatus } from "../../userStatus/base/UserStatus";
import { HubitusCheckup } from "../../hubitusCheckup/base/HubitusCheckup";
import { MessageNotify } from "../../messageNotify/base/MessageNotify";
import { UserQuestion } from "../../userQuestion/base/UserQuestion";
import { ReplyQuestion } from "../../replyQuestion/base/ReplyQuestion";
import { UsePoint } from "../../usePoint/base/UsePoint";
import { GetPoint } from "../../getPoint/base/GetPoint";

@ObjectType()
class User {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  language!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: true,
  })
  @IsJSON()
  @Field(() => GraphQLJSON)
  roles!: JsonValue;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  oauthType!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  openId!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  sessionKey!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  unionId!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  trueName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  inviterId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  province!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nickName!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avatarUrl!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumUserGender,
  })
  @IsEnum(EnumUserGender)
  @IsOptional()
  @Field(() => EnumUserGender, {
    nullable: true,
  })
  gender?: "Unknown" | "Male" | "Female" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  birthday!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  city!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  userIdCard!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  country!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  creatTime!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  lastLoginTime!: Date;

  @ApiProperty({
    required: false,
    type: () => [UserStatus],
  })
  @ValidateNested()
  @Type(() => UserStatus)
  @IsOptional()
  userStatuses?: Array<UserStatus>;

  @ApiProperty({
    required: false,
    type: () => [HubitusCheckup],
  })
  @ValidateNested()
  @Type(() => HubitusCheckup)
  @IsOptional()
  hubitusCheckups?: Array<HubitusCheckup>;

  @ApiProperty({
    required: false,
    type: () => [MessageNotify],
  })
  @ValidateNested()
  @Type(() => MessageNotify)
  @IsOptional()
  messageNotifies?: Array<MessageNotify>;

  @ApiProperty({
    required: false,
    type: () => [UserQuestion],
  })
  @ValidateNested()
  @Type(() => UserQuestion)
  @IsOptional()
  healthQuestions?: Array<UserQuestion>;

  @ApiProperty({
    required: false,
    type: () => [ReplyQuestion],
  })
  @ValidateNested()
  @Type(() => ReplyQuestion)
  @IsOptional()
  replyQuestions?: Array<ReplyQuestion>;

  @ApiProperty({
    required: false,
    type: () => [UsePoint],
  })
  @ValidateNested()
  @Type(() => UsePoint)
  @IsOptional()
  usePoints?: Array<UsePoint>;

  @ApiProperty({
    required: false,
    type: () => [GetPoint],
  })
  @ValidateNested()
  @Type(() => GetPoint)
  @IsOptional()
  getPoints?: Array<GetPoint>;
}

export { User as User };
