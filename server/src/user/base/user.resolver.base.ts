/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { User } from "./User";
import { HabitusFindManyArgs } from "../../habitus/base/HabitusFindManyArgs";
import { Habitus } from "../../habitus/base/Habitus";
import { StatusFindManyArgs } from "../../status/base/StatusFindManyArgs";
import { Status } from "../../status/base/Status";
import { IncomeMetaGasFindManyArgs } from "../../incomeMetaGas/base/IncomeMetaGasFindManyArgs";
import { IncomeMetaGas } from "../../incomeMetaGas/base/IncomeMetaGas";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { ExpenseMetaGasFindManyArgs } from "../../expenseMetaGas/base/ExpenseMetaGasFindManyArgs";
import { ExpenseMetaGas } from "../../expenseMetaGas/base/ExpenseMetaGas";
import { InquiryFindManyArgs } from "../../inquiry/base/InquiryFindManyArgs";
import { Inquiry } from "../../inquiry/base/Inquiry";
import { UserService } from "../user.service";
@graphql.Resolver(() => User)
export class UserResolverBase {
  constructor(protected readonly service: UserService) {}

  async _usersMeta(
    @graphql.Args() args: UserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [User])
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => User, { nullable: true })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => User)
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => User)
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Habitus])
  async habituses(
    @graphql.Parent() parent: User,
    @graphql.Args() args: HabitusFindManyArgs
  ): Promise<Habitus[]> {
    const results = await this.service.findHabituses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Status])
  async statuses(
    @graphql.Parent() parent: User,
    @graphql.Args() args: StatusFindManyArgs
  ): Promise<Status[]> {
    const results = await this.service.findStatuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [IncomeMetaGas])
  async incomeMetaGases(
    @graphql.Parent() parent: User,
    @graphql.Args() args: IncomeMetaGasFindManyArgs
  ): Promise<IncomeMetaGas[]> {
    const results = await this.service.findIncomeMetaGases(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Message])
  async messages(
    @graphql.Parent() parent: User,
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    const results = await this.service.findMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ExpenseMetaGas])
  async expenseMetaGases(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ExpenseMetaGasFindManyArgs
  ): Promise<ExpenseMetaGas[]> {
    const results = await this.service.findExpenseMetaGases(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Inquiry])
  async inquirys(
    @graphql.Parent() parent: User,
    @graphql.Args() args: InquiryFindManyArgs
  ): Promise<Inquiry[]> {
    const results = await this.service.findInquirys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
