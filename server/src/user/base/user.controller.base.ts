/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { HubitusFindManyArgs } from "../../hubitus/base/HubitusFindManyArgs";
import { Hubitus } from "../../hubitus/base/Hubitus";
import { HubitusWhereUniqueInput } from "../../hubitus/base/HubitusWhereUniqueInput";
import { StatusFindManyArgs } from "../../status/base/StatusFindManyArgs";
import { Status } from "../../status/base/Status";
import { StatusWhereUniqueInput } from "../../status/base/StatusWhereUniqueInput";
import { IncomeMataGasFindManyArgs } from "../../incomeMataGas/base/IncomeMataGasFindManyArgs";
import { IncomeMataGas } from "../../incomeMataGas/base/IncomeMataGas";
import { IncomeMataGasWhereUniqueInput } from "../../incomeMataGas/base/IncomeMataGasWhereUniqueInput";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { MessageWhereUniqueInput } from "../../message/base/MessageWhereUniqueInput";
import { ExpenseMataGasFindManyArgs } from "../../expenseMataGas/base/ExpenseMataGasFindManyArgs";
import { ExpenseMataGas } from "../../expenseMataGas/base/ExpenseMataGas";
import { ExpenseMataGasWhereUniqueInput } from "../../expenseMataGas/base/ExpenseMataGasWhereUniqueInput";
import { InquiryFindManyArgs } from "../../inquiry/base/InquiryFindManyArgs";
import { Inquiry } from "../../inquiry/base/Inquiry";
import { InquiryWhereUniqueInput } from "../../inquiry/base/InquiryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: data,
      select: {
        oauthType: true,
        nickName: true,
        openId: true,
        sessionKey: true,
        unionId: true,
        inviterId: true,
        phone: true,
        gender: true,
        avatarUrl: true,
        birthday: true,
        identitycard: true,
        country: true,
        language: true,
        province: true,
        city: true,
        id: true,
        realName: true,
        username: true,
        roles: true,
        creatTime: true,
        lastLoginTime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        oauthType: true,
        nickName: true,
        openId: true,
        sessionKey: true,
        unionId: true,
        inviterId: true,
        phone: true,
        gender: true,
        avatarUrl: true,
        birthday: true,
        identitycard: true,
        country: true,
        language: true,
        province: true,
        city: true,
        id: true,
        realName: true,
        username: true,
        roles: true,
        creatTime: true,
        lastLoginTime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        oauthType: true,
        nickName: true,
        openId: true,
        sessionKey: true,
        unionId: true,
        inviterId: true,
        phone: true,
        gender: true,
        avatarUrl: true,
        birthday: true,
        identitycard: true,
        country: true,
        language: true,
        province: true,
        city: true,
        id: true,
        realName: true,
        username: true,
        roles: true,
        creatTime: true,
        lastLoginTime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          oauthType: true,
          nickName: true,
          openId: true,
          sessionKey: true,
          unionId: true,
          inviterId: true,
          phone: true,
          gender: true,
          avatarUrl: true,
          birthday: true,
          identitycard: true,
          country: true,
          language: true,
          province: true,
          city: true,
          id: true,
          realName: true,
          username: true,
          roles: true,
          creatTime: true,
          lastLoginTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          oauthType: true,
          nickName: true,
          openId: true,
          sessionKey: true,
          unionId: true,
          inviterId: true,
          phone: true,
          gender: true,
          avatarUrl: true,
          birthday: true,
          identitycard: true,
          country: true,
          language: true,
          province: true,
          city: true,
          id: true,
          realName: true,
          username: true,
          roles: true,
          creatTime: true,
          lastLoginTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/hubituses")
  @ApiNestedQuery(HubitusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Hubitus",
    action: "read",
    possession: "any",
  })
  async findManyHubituses(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Hubitus[]> {
    const query = plainToClass(HubitusFindManyArgs, request.query);
    const results = await this.service.findHubituses(params.id, {
      ...query,
      select: {
        id: true,
        testTime: true,

        user: {
          select: {
            id: true,
          },
        },

        currentHabitus: true,
        testResult: true,
        countResult: true,
        suggest: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/hubituses")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectHubituses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HubitusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hubituses: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/hubituses")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateHubituses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HubitusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hubituses: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/hubituses")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectHubituses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: HubitusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hubituses: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/statuses")
  @ApiNestedQuery(StatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Status",
    action: "read",
    possession: "any",
  })
  async findManyStatuses(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Status[]> {
    const query = plainToClass(StatusFindManyArgs, request.query);
    const results = await this.service.findStatuses(params.id, {
      ...query,
      select: {
        id: true,
        updateTime: true,

        user: {
          select: {
            id: true,
          },
        },

        status: true,
        intValue: true,
        doubleValue: true,
        stringValue: true,
        dateValue: true,
        jsonValue: true,
        streamId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/statuses")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectStatuses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statuses: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/statuses")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateStatuses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statuses: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/statuses")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectStatuses(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statuses: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/incomeMataGases")
  @ApiNestedQuery(IncomeMataGasFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "IncomeMataGas",
    action: "read",
    possession: "any",
  })
  async findManyIncomeMataGases(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<IncomeMataGas[]> {
    const query = plainToClass(IncomeMataGasFindManyArgs, request.query);
    const results = await this.service.findIncomeMataGases(params.id, {
      ...query,
      select: {
        id: true,
        income_date: true,

        user: {
          select: {
            id: true,
          },
        },

        amount: true,
        category: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/incomeMataGases")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectIncomeMataGases(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: IncomeMataGasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      incomeMataGases: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/incomeMataGases")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateIncomeMataGases(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: IncomeMataGasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      incomeMataGases: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/incomeMataGases")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectIncomeMataGases(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: IncomeMataGasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      incomeMataGases: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/messages")
  @ApiNestedQuery(MessageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findManyMessages(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Message[]> {
    const query = plainToClass(MessageFindManyArgs, request.query);
    const results = await this.service.findMessages(params.id, {
      ...query,
      select: {
        id: true,
        sendTime: true,

        user: {
          select: {
            id: true,
          },
        },

        event: {
          select: {
            id: true,
          },
        },

        isNew: true,
        messageContent: true,
        messageType: true,
        messageSource: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/expenseMataGases")
  @ApiNestedQuery(ExpenseMataGasFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ExpenseMataGas",
    action: "read",
    possession: "any",
  })
  async findManyExpenseMataGases(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ExpenseMataGas[]> {
    const query = plainToClass(ExpenseMataGasFindManyArgs, request.query);
    const results = await this.service.findExpenseMataGases(params.id, {
      ...query,
      select: {
        id: true,
        expense_date: true,

        user: {
          select: {
            id: true,
          },
        },

        amount: true,
        category: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expenseMataGases")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectExpenseMataGases(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ExpenseMataGasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenseMataGases: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expenseMataGases")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateExpenseMataGases(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ExpenseMataGasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenseMataGases: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expenseMataGases")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectExpenseMataGases(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ExpenseMataGasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expenseMataGases: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/inquirys")
  @ApiNestedQuery(InquiryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Inquiry",
    action: "read",
    possession: "any",
  })
  async findManyInquirys(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Inquiry[]> {
    const query = plainToClass(InquiryFindManyArgs, request.query);
    const results = await this.service.findInquirys(params.id, {
      ...query,
      select: {
        id: true,
        inquiryTime: true,

        user: {
          select: {
            id: true,
          },
        },

        content: true,
        isPublic: true,
        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inquirys")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectInquirys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InquiryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inquirys: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inquirys")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateInquirys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InquiryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inquirys: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inquirys")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectInquirys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: InquiryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inquirys: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
