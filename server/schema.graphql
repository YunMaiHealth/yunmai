# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumMessageMessageType {
  FollowFriend
  HealthCheck
  HealthInquiry
  ReferNewuser
  RegisterNewuser
  UpdateHealth
}

enum EnumUserGender {
  Female
  Male
  Unknown
}

type Event {
  eventName: String!
  eventParam: JSON
  eventTime: DateTime!
  eventType: String!
  id: String!
  messages(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  relateUser: JSON
}

input EventCreateInput {
  eventName: String!
  eventParam: JSON
  eventTime: DateTime!
  eventType: String!
  messages: MessageCreateNestedManyWithoutEventsInput
  relateUser: JSON
}

input EventOrderByInput {
  eventName: SortOrder
  eventParam: SortOrder
  eventTime: SortOrder
  eventType: SortOrder
  id: SortOrder
  relateUser: SortOrder
}

input EventUpdateInput {
  eventName: String
  eventParam: JSON
  eventTime: DateTime
  eventType: String
  messages: MessageUpdateManyWithoutEventsInput
  relateUser: JSON
}

input EventWhereInput {
  eventName: StringFilter
  eventParam: JsonFilter
  eventType: StringFilter
  id: StringFilter
  messages: MessageListRelationFilter
  relateUser: JsonFilter
}

input EventWhereUniqueInput {
  id: String!
}

type ExpenseMetaGas {
  amount: Float!
  category: String!
  expense_date: DateTime!
  id: String!
  user: User
}

input ExpenseMetaGasCreateInput {
  amount: Float!
  category: String!
  expense_date: DateTime!
  user: UserWhereUniqueInput
}

input ExpenseMetaGasCreateNestedManyWithoutUsersInput {
  connect: [ExpenseMetaGasWhereUniqueInput!]
}

input ExpenseMetaGasListRelationFilter {
  every: ExpenseMetaGasWhereInput
  none: ExpenseMetaGasWhereInput
  some: ExpenseMetaGasWhereInput
}

input ExpenseMetaGasOrderByInput {
  amount: SortOrder
  category: SortOrder
  expense_date: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ExpenseMetaGasUpdateInput {
  amount: Float
  category: String
  expense_date: DateTime
  user: UserWhereUniqueInput
}

input ExpenseMetaGasUpdateManyWithoutUsersInput {
  connect: [ExpenseMetaGasWhereUniqueInput!]
  disconnect: [ExpenseMetaGasWhereUniqueInput!]
  set: [ExpenseMetaGasWhereUniqueInput!]
}

input ExpenseMetaGasWhereInput {
  amount: IntFilter
  category: StringFilter
  id: StringFilter
  user: UserWhereUniqueInput
}

input ExpenseMetaGasWhereUniqueInput {
  id: String!
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

type Habitus {
  countResult: JSON!
  currentHabitus: String!
  id: String!
  suggest: JSON
  testResult: JSON!
  testTime: DateTime!
  user: User
}

input HabitusCreateInput {
  countResult: JSON!
  currentHabitus: String!
  suggest: JSON
  testResult: JSON!
  testTime: DateTime!
  user: UserWhereUniqueInput
}

input HabitusCreateNestedManyWithoutUsersInput {
  connect: [HabitusWhereUniqueInput!]
}

input HabitusListRelationFilter {
  every: HabitusWhereInput
  none: HabitusWhereInput
  some: HabitusWhereInput
}

input HabitusOrderByInput {
  countResult: SortOrder
  currentHabitus: SortOrder
  id: SortOrder
  suggest: SortOrder
  testResult: SortOrder
  testTime: SortOrder
  userId: SortOrder
}

input HabitusUpdateInput {
  countResult: JSON
  currentHabitus: String
  suggest: JSON
  testResult: JSON
  testTime: DateTime
  user: UserWhereUniqueInput
}

input HabitusUpdateManyWithoutUsersInput {
  connect: [HabitusWhereUniqueInput!]
  disconnect: [HabitusWhereUniqueInput!]
  set: [HabitusWhereUniqueInput!]
}

input HabitusWhereInput {
  countResult: JsonFilter
  currentHabitus: StringFilter
  id: StringFilter
  suggest: JsonFilter
  testResult: JsonFilter
  user: UserWhereUniqueInput
}

input HabitusWhereUniqueInput {
  id: String!
}

type IncomeMetaGas {
  amount: Float!
  category: String!
  id: String!
  income_date: DateTime!
  user: User
}

input IncomeMetaGasCreateInput {
  amount: Float!
  category: String!
  income_date: DateTime!
  user: UserWhereUniqueInput
}

input IncomeMetaGasCreateNestedManyWithoutUsersInput {
  connect: [IncomeMetaGasWhereUniqueInput!]
}

input IncomeMetaGasListRelationFilter {
  every: IncomeMetaGasWhereInput
  none: IncomeMetaGasWhereInput
  some: IncomeMetaGasWhereInput
}

input IncomeMetaGasOrderByInput {
  amount: SortOrder
  category: SortOrder
  id: SortOrder
  income_date: SortOrder
  userId: SortOrder
}

input IncomeMetaGasUpdateInput {
  amount: Float
  category: String
  income_date: DateTime
  user: UserWhereUniqueInput
}

input IncomeMetaGasUpdateManyWithoutUsersInput {
  connect: [IncomeMetaGasWhereUniqueInput!]
  disconnect: [IncomeMetaGasWhereUniqueInput!]
  set: [IncomeMetaGasWhereUniqueInput!]
}

input IncomeMetaGasWhereInput {
  amount: IntFilter
  category: StringFilter
  id: StringFilter
  user: UserWhereUniqueInput
}

input IncomeMetaGasWhereUniqueInput {
  id: String!
}

type Inquiry {
  content: JSON!
  id: String!
  inquiryTime: DateTime!
  isPublic: Boolean!
  title: String!
  user: User
}

input InquiryCreateInput {
  content: JSON!
  inquiryTime: DateTime!
  isPublic: Boolean!
  title: String!
  user: UserWhereUniqueInput
}

input InquiryCreateNestedManyWithoutUsersInput {
  connect: [InquiryWhereUniqueInput!]
}

input InquiryListRelationFilter {
  every: InquiryWhereInput
  none: InquiryWhereInput
  some: InquiryWhereInput
}

input InquiryOrderByInput {
  content: SortOrder
  id: SortOrder
  inquiryTime: SortOrder
  isPublic: SortOrder
  title: SortOrder
  userId: SortOrder
}

input InquiryUpdateInput {
  content: JSON
  inquiryTime: DateTime
  isPublic: Boolean
  title: String
  user: UserWhereUniqueInput
}

input InquiryUpdateManyWithoutUsersInput {
  connect: [InquiryWhereUniqueInput!]
  disconnect: [InquiryWhereUniqueInput!]
  set: [InquiryWhereUniqueInput!]
}

input InquiryWhereInput {
  content: JsonFilter
  id: StringFilter
  isPublic: BooleanFilter
  title: StringFilter
  user: UserWhereUniqueInput
}

input InquiryWhereUniqueInput {
  id: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Message {
  event: Event
  id: String!
  isRead: Boolean!
  messageContent: JSON!
  messageSource: String!
  messageType: EnumMessageMessageType
  sendTime: DateTime!
  user: User
}

input MessageCreateInput {
  event: EventWhereUniqueInput
  isRead: Boolean!
  messageContent: JSON!
  messageSource: String!
  messageType: EnumMessageMessageType!
  sendTime: DateTime!
  user: UserWhereUniqueInput
}

input MessageCreateNestedManyWithoutEventsInput {
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutUsersInput {
  connect: [MessageWhereUniqueInput!]
}

type MessageInfo {
  id: String!
  isRead: Boolean!
  messageContent: String!
  messageSource: String!
  messageType: String!
  numberOfUnread: Float!
  sendTime: DateTime!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByInput {
  eventId: SortOrder
  id: SortOrder
  isRead: SortOrder
  messageContent: SortOrder
  messageSource: SortOrder
  messageType: SortOrder
  sendTime: SortOrder
  userId: SortOrder
}

input MessageUpdateInput {
  event: EventWhereUniqueInput
  isRead: Boolean
  messageContent: JSON
  messageSource: String
  messageType: EnumMessageMessageType
  sendTime: DateTime
  user: UserWhereUniqueInput
}

input MessageUpdateManyWithoutEventsInput {
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
}

input MessageUpdateManyWithoutUsersInput {
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
}

input MessageWhereInput {
  event: EventWhereUniqueInput
  id: StringFilter
  isRead: BooleanFilter
  messageContent: JsonFilter
  messageSource: StringFilter
  messageType: EnumMessageMessageType
  user: UserWhereUniqueInput
}

input MessageWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createExpenseMetaGas(data: ExpenseMetaGasCreateInput!): ExpenseMetaGas!
  createHabitus(data: HabitusCreateInput!): Habitus!
  createIncomeMetaGas(data: IncomeMetaGasCreateInput!): IncomeMetaGas!
  createInquiry(data: InquiryCreateInput!): Inquiry!
  createMessage(data: MessageCreateInput!): Message!
  createStatus(data: StatusCreateInput!): Status!
  createUser(data: UserCreateInput!): User!
  deleteEvent(where: EventWhereUniqueInput!): Event!
  deleteExpenseMetaGas(where: ExpenseMetaGasWhereUniqueInput!): ExpenseMetaGas!
  deleteHabitus(where: HabitusWhereUniqueInput!): Habitus!
  deleteIncomeMetaGas(where: IncomeMetaGasWhereUniqueInput!): IncomeMetaGas!
  deleteInquiry(where: InquiryWhereUniqueInput!): Inquiry!
  deleteMessage(where: MessageWhereUniqueInput!): Message!
  deleteStatus(where: StatusWhereUniqueInput!): Status!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  registerUser(data: UserCreateInput!): UserInfo!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  updateExpenseMetaGas(data: ExpenseMetaGasUpdateInput!, where: ExpenseMetaGasWhereUniqueInput!): ExpenseMetaGas!
  updateHabitus(data: HabitusUpdateInput!, where: HabitusWhereUniqueInput!): Habitus!
  updateIncomeMetaGas(data: IncomeMetaGasUpdateInput!, where: IncomeMetaGasWhereUniqueInput!): IncomeMetaGas!
  updateInquiry(data: InquiryUpdateInput!, where: InquiryWhereUniqueInput!): Inquiry!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Nft {
  NFT: Float
  banlance: String
  dan: Float
  nftList: JSON!
  yao: Float
}

type Query {
  _eventsMeta(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): MetaQueryPayload!
  _expenseMetaGasesMeta(orderBy: [ExpenseMetaGasOrderByInput!], skip: Float, take: Float, where: ExpenseMetaGasWhereInput): MetaQueryPayload!
  _habitusesMeta(orderBy: [HabitusOrderByInput!], skip: Float, take: Float, where: HabitusWhereInput): MetaQueryPayload!
  _incomeMetaGasesMeta(orderBy: [IncomeMetaGasOrderByInput!], skip: Float, take: Float, where: IncomeMetaGasWhereInput): MetaQueryPayload!
  _inquiriesMeta(orderBy: [InquiryOrderByInput!], skip: Float, take: Float, where: InquiryWhereInput): MetaQueryPayload!
  _messagesMeta(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): MetaQueryPayload!
  _statusesMeta(orderBy: [StatusOrderByInput!], skip: Float, take: Float, where: StatusWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  event(where: EventWhereUniqueInput!): Event
  events(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): [Event!]!
  expenseMetaGas(where: ExpenseMetaGasWhereUniqueInput!): ExpenseMetaGas
  expenseMetaGases(orderBy: [ExpenseMetaGasOrderByInput!], skip: Float, take: Float, where: ExpenseMetaGasWhereInput): [ExpenseMetaGas!]!
  habitus(where: HabitusWhereUniqueInput!): Habitus
  habituses(orderBy: [HabitusOrderByInput!], skip: Float, take: Float, where: HabitusWhereInput): [Habitus!]!
  incomeMetaGas(where: IncomeMetaGasWhereUniqueInput!): IncomeMetaGas
  incomeMetaGases(orderBy: [IncomeMetaGasOrderByInput!], skip: Float, take: Float, where: IncomeMetaGasWhereInput): [IncomeMetaGas!]!
  inquiries(orderBy: [InquiryOrderByInput!], skip: Float, take: Float, where: InquiryWhereInput): [Inquiry!]!
  inquiry(where: InquiryWhereUniqueInput!): Inquiry
  message(where: MessageWhereUniqueInput!): Message
  messageCatalogs(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [MessageInfo!]!
  messages(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  nftInfo(contract: String, owner: String): Nft!
  status(where: StatusWhereUniqueInput!): Status
  statuses(orderBy: [StatusOrderByInput!], skip: Float, take: Float, where: StatusWhereInput): [Status!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

type Status {
  dateValue: DateTime
  doubleValue: Float
  id: String!
  intValue: Float
  jsonValue: JSON
  status: String!
  streamId: String
  stringValue: String
  updateTime: DateTime!
  user: User
}

input StatusCreateInput {
  dateValue: DateTime
  doubleValue: Float
  intValue: Float
  jsonValue: JSON
  status: String!
  streamId: String
  stringValue: String
  updateTime: DateTime!
  user: UserWhereUniqueInput!
}

input StatusCreateNestedManyWithoutUsersInput {
  connect: [StatusWhereUniqueInput!]
}

input StatusListRelationFilter {
  every: StatusWhereInput
  none: StatusWhereInput
  some: StatusWhereInput
}

input StatusOrderByInput {
  dateValue: SortOrder
  doubleValue: SortOrder
  id: SortOrder
  intValue: SortOrder
  jsonValue: SortOrder
  status: SortOrder
  streamId: SortOrder
  stringValue: SortOrder
  updateTime: SortOrder
  userId: SortOrder
}

input StatusUpdateInput {
  dateValue: DateTime
  doubleValue: Float
  intValue: Float
  jsonValue: JSON
  status: String
  streamId: String
  stringValue: String
  updateTime: DateTime
  user: UserWhereUniqueInput
}

input StatusUpdateManyWithoutUsersInput {
  connect: [StatusWhereUniqueInput!]
  disconnect: [StatusWhereUniqueInput!]
  set: [StatusWhereUniqueInput!]
}

input StatusWhereInput {
  dateValue: DateTimeNullableFilter
  doubleValue: FloatNullableFilter
  id: StringFilter
  intValue: IntNullableFilter
  jsonValue: JsonFilter
  status: StringFilter
  streamId: StringNullableFilter
  stringValue: StringNullableFilter
  user: UserWhereUniqueInput
}

input StatusWhereUniqueInput {
  id: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  avatarUrl: String
  birthday: DateTime
  city: String
  country: String
  creatTime: DateTime!
  expenseMetaGases(orderBy: [ExpenseMetaGasOrderByInput!], skip: Float, take: Float, where: ExpenseMetaGasWhereInput): [ExpenseMetaGas!]!
  gender: EnumUserGender
  habituses(orderBy: [HabitusOrderByInput!], skip: Float, take: Float, where: HabitusWhereInput): [Habitus!]!
  id: String!
  identitycard: String
  incomeMetaGases(orderBy: [IncomeMetaGasOrderByInput!], skip: Float, take: Float, where: IncomeMetaGasWhereInput): [IncomeMetaGas!]!
  inquirys(orderBy: [InquiryOrderByInput!], skip: Float, take: Float, where: InquiryWhereInput): [Inquiry!]!
  inviterId: String
  language: String
  lastLoginTime: DateTime!
  messages(orderBy: [MessageOrderByInput!], skip: Float, take: Float, where: MessageWhereInput): [Message!]!
  nickName: String
  oauthType: String
  openId: String!
  phone: String
  province: String
  realName: String
  roles: JSON!
  sessionKey: String!
  statuses(orderBy: [StatusOrderByInput!], skip: Float, take: Float, where: StatusWhereInput): [Status!]!
  unionId: String
  username: String!
}

input UserCreateInput {
  avatarUrl: String
  birthday: DateTime
  city: String
  country: String
  creatTime: DateTime!
  expenseMetaGases: ExpenseMetaGasCreateNestedManyWithoutUsersInput
  gender: EnumUserGender
  habituses: HabitusCreateNestedManyWithoutUsersInput
  identitycard: String
  incomeMetaGases: IncomeMetaGasCreateNestedManyWithoutUsersInput
  inquirys: InquiryCreateNestedManyWithoutUsersInput
  inviterId: String
  language: String
  lastLoginTime: DateTime!
  messages: MessageCreateNestedManyWithoutUsersInput
  nickName: String
  oauthType: String
  openId: String!
  password: String!
  phone: String
  province: String
  realName: String
  roles: JSON!
  sessionKey: String!
  statuses: StatusCreateNestedManyWithoutUsersInput
  unionId: String
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  avatarUrl: SortOrder
  birthday: SortOrder
  city: SortOrder
  country: SortOrder
  creatTime: SortOrder
  gender: SortOrder
  id: SortOrder
  identitycard: SortOrder
  inviterId: SortOrder
  language: SortOrder
  lastLoginTime: SortOrder
  nickName: SortOrder
  oauthType: SortOrder
  openId: SortOrder
  password: SortOrder
  phone: SortOrder
  province: SortOrder
  realName: SortOrder
  roles: SortOrder
  sessionKey: SortOrder
  unionId: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  avatarUrl: String
  birthday: DateTime
  city: String
  country: String
  creatTime: DateTime
  expenseMetaGases: ExpenseMetaGasUpdateManyWithoutUsersInput
  gender: EnumUserGender
  habituses: HabitusUpdateManyWithoutUsersInput
  identitycard: String
  incomeMetaGases: IncomeMetaGasUpdateManyWithoutUsersInput
  inquirys: InquiryUpdateManyWithoutUsersInput
  inviterId: String
  language: String
  lastLoginTime: DateTime
  messages: MessageUpdateManyWithoutUsersInput
  nickName: String
  oauthType: String
  openId: String
  password: String
  phone: String
  province: String
  realName: String
  roles: JSON
  sessionKey: String
  statuses: StatusUpdateManyWithoutUsersInput
  unionId: String
  username: String
}

input UserWhereInput {
  avatarUrl: StringNullableFilter
  birthday: DateTimeNullableFilter
  city: StringNullableFilter
  country: StringNullableFilter
  expenseMetaGases: ExpenseMetaGasListRelationFilter
  gender: EnumUserGender
  habituses: HabitusListRelationFilter
  id: StringFilter
  identitycard: StringNullableFilter
  incomeMetaGases: IncomeMetaGasListRelationFilter
  inquirys: InquiryListRelationFilter
  inviterId: StringNullableFilter
  language: StringNullableFilter
  messages: MessageListRelationFilter
  nickName: StringNullableFilter
  oauthType: StringNullableFilter
  openId: StringFilter
  phone: StringNullableFilter
  province: StringNullableFilter
  realName: StringNullableFilter
  sessionKey: StringFilter
  statuses: StatusListRelationFilter
  unionId: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
