datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  oauthType        String?
  nickName         String?
  sessionKey       String
  inviterId        String?
  phone            String?
  gender           EnumUserGender?
  openId           String
  avatarUrl        String?
  unionId          String?
  birthday         DateTime?
  identitycard     String?
  country          String?
  language         String?
  province         String?
  city             String?
  id               String           @id @default(cuid())
  realName         String?
  username         String           @unique
  password         String
  roles            Json
  creatTime        DateTime         @default(now())
  lastLoginTime    DateTime         @updatedAt
  habituses        Habitus[]
  statuses         Status[]
  incomeMetaGases  IncomeMetaGas[]
  messages         Message[]
  expenseMetaGases ExpenseMetaGas[]
  inquirys         Inquiry[]
}

model Habitus {
  id             String   @id @default(cuid())
  testTime       DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?
  currentHabitus String
  testResult     Json
  countResult    Json
  suggest        Json?
}

model Status {
  id          String    @id @default(cuid())
  updateTime  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  status      String
  intValue    Int?
  doubleValue Float?
  stringValue String?
  dateValue   DateTime?
  jsonValue   Json?
  streamId    String?
}

model IncomeMetaGas {
  id          String   @id @default(cuid())
  income_date DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  amount      Int
  category    String
}

model ExpenseMetaGas {
  id           String   @id @default(cuid())
  expense_date DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  amount       Int
  category     String
}

model Message {
  messageAction  EnumMessageMessageAction
  id             String                   @id @default(cuid())
  sendTime       DateTime                 @default(now())
  user           User?                    @relation(fields: [userId], references: [id])
  userId         String?
  messageSource  String
  isRead         Boolean
  messageContent Json
  event          Event?                   @relation(fields: [eventId], references: [id])
  eventId        String?
  messageType    EnumMessageMessageType
}

model Event {
  id         String    @id @default(cuid())
  eventTime  DateTime  @default(now())
  messages   Message[]
  eventType  String
  eventName  String
  eventParam Json?
  relateUser Json?
}

model Inquiry {
  id          String   @id @default(cuid())
  inquiryTime DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  content     Json
  isPublic    Boolean
  title       String
}

enum EnumUserGender {
  UNKNOWN
  MALE
  FEMALE
}

enum EnumMessageMessageAction {
  METAGAS_CHANGE
  FRIEND_HEALTH
  HEALTH_REMIND
}

enum EnumMessageMessageType {
  FOLLOW_FRIEND
  HEALTH_CHECK
  UPDATE_HEALTH
  REGISTER_NEWUSER
  REFER_NEWUSER
  HEALTH_INQUIRY
}
