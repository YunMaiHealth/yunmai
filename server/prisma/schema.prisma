datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  password        String
  roles           Json
  oauthType       String
  openId          String
  sessionKey      String
  unionId         String
  trueName        String?
  inviterId       String?
  phone           String?
  province        String?
  nickName        String?
  avatarUrl       String?
  gender          EnumUserGender?
  birthday        DateTime?
  city            String?
  userIdCard      String?
  country         String?
  language        String?
  creatTime       DateTime         @default(now())
  lastLoginTime   DateTime
  userStatuses    UserStatus[]
  hubitusCheckups HubitusCheckup[]
  messageNotifies MessageNotify[]
  healthQuestions UserQuestion[]
  replyQuestions  ReplyQuestion[]
}

model HubitusCheckup {
  id             String   @id @default(cuid())
  currentHabitus String?
  testResult     String?
  countResult    String?
  suggest        String?
  testTime       DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model UserStatus {
  id          String    @id @default(cuid())
  status      String?
  intValue    Int?
  doubleValue Float?
  stringValue String?
  dateValue   DateTime?
  jsonValue   Json?
  blobValue   String?
  updateTime  DateTime  @updatedAt
  streamId    String?
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model MessageNotify {
  messageSource  String
  id             String    @id @default(cuid())
  sendTime       DateTime  @default(now())
  isNew          Boolean
  messageContent String
  messageType    String
  event          EventLog? @relation(fields: [eventId], references: [id])
  eventId        String?
  user           User?     @relation(fields: [userId], references: [id])
  userId         String?
}

model EventLog {
  id              String          @id @default(cuid())
  eventTime       DateTime        @default(now())
  eventType       String
  eventName       String?
  eventParam      Json?
  relateUser      Json?
  messageNotifies MessageNotify[]
}

model UserQuestion {
  id              String          @id @default(cuid())
  questionTime    DateTime        @default(now())
  questionTitle   String
  questionContent String?
  isPublic        String
  user            User?           @relation(fields: [userId], references: [id])
  userId          String?
  replyQuestions  ReplyQuestion[]
}

model ReplyQuestion {
  id             String        @id @default(cuid())
  replyTime      DateTime      @default(now())
  questionReply  String
  isPublic       String
  replyUser      User          @relation(fields: [replyUserId], references: [id])
  replyUserId    String
  userQuestion   UserQuestion? @relation(fields: [userQuestionId], references: [id])
  userQuestionId String?
}

enum EnumUserGender {
  Unknown
  Male
  Female
}
